1. Configuration
git config --global user.name "Your Name"
Set your Git username globally.

git config --global user.email "you@example.com"
Set your Git email globally.


2. Initialize and Clone
git init
Initialize a new Git repository in your directory.

git clone <repository_url>
Clone an existing repository from a remote source.


3. Stage and Commit Changes
git status
Check the status of your working directory (changes staged, unstaged, etc.).

git add <file_name>
Stage a file for commit.

git add .
Stage all changed files for commit.

git commit -m "Commit message"
Commit staged changes with a descriptive message.

git commit --amend
Amend the last commit (useful if you forgot to add something).


4. Branching
git branch
List all branches in your repository.

git branch <branch_name>
Create a new branch.

git checkout <branch_name>
Switch to another branch.

git checkout -b <branch_name>
Create a new branch and switch to it.

git merge <branch_name>
Merge a branch into your current branch.

git branch -d <branch_name>
Delete a branch locally.



5. Push and Pull
git pull origin <branch_name>
Pull the latest changes from the remote repository into your current branch.

git push origin <branch_name>
Push your committed changes to the remote repository.

git push -u origin <branch_name>
Push a branch and set it to track the remote branch.




6. Stashing and Cleaning
git stash
Stash your uncommitted changes to work on them later.

git stash pop
Apply the stashed changes and remove them from stash.

git stash list
List all stashes.

git clean -f
Remove untracked files from the working directory.



7. Viewing History
git log
View the commit history.

git log --oneline
View a simplified, one-line commit history.

git log --graph --oneline --all
View commit history with a graphical representation of branches.



8. Reverting and Resetting
git revert <commit_id>
Create a new commit that undoes the changes made in the specified commit.

git reset --hard <commit_id>
Reset the working directory and index to a specific commit, discarding changes.

git reset --soft <commit_id>
Reset to a commit but keep changes in the staging area.




Here are some commonly used Git commands:

1. Configuration
git config --global user.name "Your Name"
Set your Git username globally.

git config --global user.email "you@example.com"
Set your Git email globally.

2. Initialize and Clone
git init
Initialize a new Git repository in your directory.

git clone <repository_url>
Clone an existing repository from a remote source.

3. Stage and Commit Changes
git status
Check the status of your working directory (changes staged, unstaged, etc.).

git add <file_name>
Stage a file for commit.

git add .
Stage all changed files for commit.

git commit -m "Commit message"
Commit staged changes with a descriptive message.

git commit --amend
Amend the last commit (useful if you forgot to add something).

4. Branching
git branch
List all branches in your repository.

git branch <branch_name>
Create a new branch.

git checkout <branch_name>
Switch to another branch.

git checkout -b <branch_name>
Create a new branch and switch to it.

git merge <branch_name>
Merge a branch into your current branch.

git branch -d <branch_name>
Delete a branch locally.

5. Push and Pull
git pull origin <branch_name>
Pull the latest changes from the remote repository into your current branch.

git push origin <branch_name>
Push your committed changes to the remote repository.

git push -u origin <branch_name>
Push a branch and set it to track the remote branch.

6. Stashing and Cleaning
git stash
Stash your uncommitted changes to work on them later.

git stash pop
Apply the stashed changes and remove them from stash.

git stash list
List all stashes.

git clean -f
Remove untracked files from the working directory.

7. Viewing History
git log
View the commit history.

git log --oneline
View a simplified, one-line commit history.

git log --graph --oneline --all
View commit history with a graphical representation of branches.

8. Reverting and Resetting
git revert <commit_id>
Create a new commit that undoes the changes made in the specified commit.

git reset --hard <commit_id>
Reset the working directory and index to a specific commit, discarding changes.

git reset --soft <commit_id>
Reset to a commit but keep changes in the staging area.

9. Tagging
git tag <tag_name>
Create a new tag for a specific commit.

git push origin <tag_name>
Push a tag to the remote repository.


